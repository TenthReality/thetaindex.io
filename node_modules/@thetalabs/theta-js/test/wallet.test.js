require('isomorphic-fetch');
const thetajs = require('..');
const Wallet = thetajs.Wallet;
const {HttpProvider} = thetajs.providers;
const {ChainIds} = thetajs.networks;

test('should create a random Wallet', () => {
    const wallet = Wallet.createRandom()
    expect(wallet).not.toBe(null);
});

test('should create a Wallet from mnemonic', () => {
    const expectedWalletAddress = "0x95944D0F9C86794284ABc375616C83B0E6A1A8B7";
    const mnemonic = "remain sorry remember trick purse also roast kidney history dragon fatigue chuckle";
    const wallet = Wallet.fromMnemonic(mnemonic);

    expect(wallet.address).toBe(expectedWalletAddress);
});

test('should create a Wallet from mnemonic index 0', () => {
    //This should match the wallet returned without passing in a custom path!
    const expectedWalletAddress = "0x95944D0F9C86794284ABc375616C83B0E6A1A8B7";
    const mnemonic = "remain sorry remember trick purse also roast kidney history dragon fatigue chuckle";
    const wallet = Wallet.fromMnemonic(mnemonic, null, {
        path: `${thetajs.constants.DerivationPaths.Theta}/0`
    });

    expect(wallet.address).toBe(expectedWalletAddress);
});

test('should create a Wallet from mnemonic index 1', () => {
    const expectedWalletAddress = "0x471E2Aa03dbDc153a92b89Fb10B67020b729BD98";
    const mnemonic = "remain sorry remember trick purse also roast kidney history dragon fatigue chuckle";
    const wallet = Wallet.fromMnemonic(mnemonic, null, {
        path: `${thetajs.constants.DerivationPaths.Theta}/1`
    });

    expect(wallet.address).toBe(expectedWalletAddress);
});

test('should create a Wallet from private key', () => {
    const expectedWalletAddress = "0x95944D0F9C86794284ABc375616C83B0E6A1A8B7";
    const privateKey = "0x19f66b5f75f0cf6fe4fbbcca24aba2031031affef8b596b922b9dfd669f8f5ae";
    const wallet = new Wallet(privateKey);

    expect(wallet.address).toBe(expectedWalletAddress);
});

test('should encrypt a Wallet to json with password qwertyuiop', async () => {
    const privateKey = "0x19f66b5f75f0cf6fe4fbbcca24aba2031031affef8b596b922b9dfd669f8f5ae";
    const password = "qwertyuiop";
    const wallet = new Wallet(privateKey);
    const json = await wallet.encryptToJson(password);

    expect(json).not.toBe(null);
});

test('should decrypt a Wallet with password qwertyuiop', async () => {
    const expectedWalletAddress = "0x95944D0F9C86794284ABc375616C83B0E6A1A8B7";
    const json = "{\"version\":3,\"id\":\"65da41e2-4c0a-487a-b2a4-2e5785786917\",\"address\":\"95944d0f9c86794284abc375616c83b0e6a1a8b7\",\"crypto\":{\"ciphertext\":\"f50a7176a4b6fb2dd402a3cedb9a9b7660566e9f2d6c4a800c7f20fb061aecb2\",\"cipherparams\":{\"iv\":\"75f7c49fabc77fbc78177e86cc7c2ff2\"},\"cipher\":\"aes-128-ctr\",\"kdf\":\"scrypt\",\"kdfparams\":{\"dklen\":32,\"salt\":\"68798f658e6adeeb2de05aaeaa9699c10281f9837966824f4d34a4b53bb4a7d3\",\"n\":8192,\"r\":8,\"p\":1},\"mac\":\"d46c1baa5228a8f31343f16bcccdb70adabbbd2b8577605c56e14dbc093f212c\"}}"
    const password = "qwertyuiop";
    const decryptedWallet = Wallet.fromEncryptedJson(json, password);

    expect(decryptedWallet.address).toBe(expectedWalletAddress);
});

test('should decrypt a Wallet with password qwertyuiop with a provider', async () => {
    const expectedWalletAddress = "0x95944D0F9C86794284ABc375616C83B0E6A1A8B7";
    const json = "{\"version\":3,\"id\":\"65da41e2-4c0a-487a-b2a4-2e5785786917\",\"address\":\"95944d0f9c86794284abc375616c83b0e6a1a8b7\",\"crypto\":{\"ciphertext\":\"f50a7176a4b6fb2dd402a3cedb9a9b7660566e9f2d6c4a800c7f20fb061aecb2\",\"cipherparams\":{\"iv\":\"75f7c49fabc77fbc78177e86cc7c2ff2\"},\"cipher\":\"aes-128-ctr\",\"kdf\":\"scrypt\",\"kdfparams\":{\"dklen\":32,\"salt\":\"68798f658e6adeeb2de05aaeaa9699c10281f9837966824f4d34a4b53bb4a7d3\",\"n\":8192,\"r\":8,\"p\":1},\"mac\":\"d46c1baa5228a8f31343f16bcccdb70adabbbd2b8577605c56e14dbc093f212c\"}}"
    const password = "qwertyuiop";
    const provider = new HttpProvider(ChainIds.Mainnet);
    const decryptedWallet = Wallet.fromEncryptedJson(json, password, provider);

    expect(decryptedWallet.address).toBe(expectedWalletAddress);
    expect(decryptedWallet.provider).not.toBe(null);
});
